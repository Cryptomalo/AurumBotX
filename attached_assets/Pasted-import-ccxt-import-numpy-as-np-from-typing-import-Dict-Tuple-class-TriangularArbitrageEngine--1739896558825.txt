import ccxt
import numpy as np
from typing import Dict, Tuple

class TriangularArbitrageEngine:
    def __init__(self, exchange: str = 'binance'):
        self.exchange = getattr(ccxt, exchange)({
            'enableRateLimit': True,
            'options': {'adjustForTimeDifference': True}
        })
        self.fee = 0.001  # 0.1% fee per trade
        self.min_profit_percent = 0.3  ️# Soglia minima di profitto
        self.trade_amount = 0.01  # BTC

    async def load_markets(self):
        await self.exchange.load_markets()
        self.symbols = [s for s in self.exchange.symbols if 'BTC' in s]

    def calculate_triangle(self, pair1: str, pair2: str, pair3: str) -> float:
        """
        Calcola il profitto teorico per un triangolo A -> B -> C -> A
        """
        try:
            # Ottieni i migliori prezzi bid/ask
            ticker1 = self.exchange.fetch_order_book(pair1)
            ticker2 = self.exchange.fetch_order_book(pair2)
            ticker3 = self.exchange.fetch_order_book(pair3)

            # Prezzi di acquisto (ask) e vendita (bid)
            a_buy = ticker1['asks'][0][0]
            b_sell = ticker2['bids'][0][0]
            c_sell = ticker3['bids'][0][0]

            # Calcolo del ciclo arbitrale
            initial = self.trade_amount
            step1 = initial / a_buy * (1 - self.fee)
            step2 = step1 * b_sell * (1 - self.fee)
            step3 = step2 * c_sell * (1 - self.fee)
            
            return (step3 - initial) / initial * 100

        except (KeyError, IndexError):
            return 0

    async def find_opportunities(self):
        opportunities = []
        triangles = self._generate_triangles() ️# Genera combinazioni triple
        
        for triangle in triangles:
            profit = self.calculate_triangle(*triangle)
            if profit > self.min_profit_percent:
                opportunities.append({
                    'triangle': triangle,
                    'profit': round(profit, 2),
                    'volume': self._check_liquidity(triangle)
                })
        
        return sorted(opportunities, key=lambda x: x['profit'], reverse=True)

    def _generate_triangles(self) -> list:
        """
        Genera combinazioni triangolari valide (es. BTC/USDT -> USDT/ETH -> ETH/BTC)
        """
        # Implementa la logica per trovare triangoli validi
        # (questa è una versione semplificata)
        return [
            ('BTC/USDT', 'USDT/ETH', 'ETH/BTC'),
            ('BTC/USDT', 'USDT/BNB', 'BNB/BTC'),
            # Aggiungi altre coppie
        ]

    def _check_liquidity(self, triangle: Tuple[str, str, str]) -> bool:
        """
        Verifica che ci sia sufficiente liquidità per eseguire l'arbitraggio
        """
        min_amount = self.trade_amount * 3 ️# Liquidity buffer
        for pair in triangle:
            order_book = self.exchange.fetch_order_book(pair)
            if order_book['bids'][0][1] < min_amount or order_book['asks'][0][1] < min_amount:
                return False
        return True

    async def execute_arbitrage(self, triangle: Tuple[str, str, str]):
        """
        Esegue l'arbitraggio triangolare (versione semplificata)
        """
        try:
            # 1. Acquista primo asset
            order1 = await self.exchange.create_market_buy_order(
                triangle[0], 
                self.trade_amount
            )
            
            # 2. Acquista secondo asset
            order2 = await self.exchange.create_market_sell_order(
                triangle[1],
                order1['filled']
            )
            
            # 3. Chiudi il ciclo
            order3 = await self.exchange.create_market_sell_order(
                triangle[2],
                order2['filled']
            )
            
            return order3['filled'] - self.trade_amount ️# Profitto netto
            
        except ccxt.InsufficientFunds:
            print("Error: Fondi insufficienti")
            return 0

# ️Utilizzo
async def main():
    arb_engine = TriangularArbitrageEngine('binance')
    await arb_engine.load_markets()
    
    while True:
        opportunities = await arb_engine.find_opportunities()
        if opportunities:
            best = opportunities[0]
            if best['volume'] and best['profit'] > 0.5:
                print(f"⚡ Opportunità trovata: {best['profit']}%")
                profit = await arb_engine.execute_arbitrage(best['triangle'])
                print(f"Profit: {profit} BTC")
        
        await asyncio.sleep(5) ️# Controlla ogni 5 secondi

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())